version: "3.8"

services:
  sql_edge:
    image: mcr.microsoft.com/azure-sql-edge:latest
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "Wawi247525="
      MSSQL_COLLATION: "Chinese_Taiwan_Stroke_CI_AI"
      TZ: "Asia/Taipei"
    ports:
      - "1433:1433"
    volumes:
      # 使用先前已經設定好的volume[discord_db_data]來同步來自mssql容器的即時資料
      - discord_db_data:/var/opt/mssql
    networks:
      - discord_network

  sqlcmd:
    image: mcr.microsoft.com/mssql-tools:latest
    command: >
      /bin/bash -c "
        sleep 20;
        /opt/mssql-tools/bin/sqlcmd -S sql_edge -U SA -P 'Wawi247525=' -d master -i /data/init-db.sql;
        "
    # 此命令可以先指示容器使用bash去執行sqlcmd連線，並input初始化資料進去
    volumes:
      - ./data:/data
    networks:
      - discord_network

  discord_backend:
    build:
      context: ./discord-back-end
      dockerfile: Dockerfile
    ports:
      - "8088:8088"
    volumes:
      - java_logs:/var/opt/logs/discord
    networks:
      - discord_network
    environment:
      #   此處的DATASOURCE跟後端的application.yml配合
      - DATASOURCE_URL=jdbc:sqlserver://sql_edge:1433;databaseName=discord;trustServerCertificate=true
      - DATASOURCE_USERNAME=SA
      - DATASOURCE_PASSWORD=${DATASOURCE_PASSWORD}
      #   如果密碼用這種方式寫，就需要在跟目錄建立.env檔來放置密碼

  discord_frontend:
    build:
      context: ./discord-front-end
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    networks:
      - discord_network

volumes:
  discord_db_data:
  java_logs:

networks:
  discord_network:
    name: discord_network
    external: true
    # 為true時表示該網路已經存在，且不是由目前的Docker Compose配置所建立的
